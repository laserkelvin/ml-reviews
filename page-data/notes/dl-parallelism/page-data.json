{
    "componentChunkName": "component---node-modules-gatsby-theme-kb-src-templates-topic-js",
    "path": "/notes/dl-parallelism",
    "result": {"data":{"file":{"childMdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"dl-parallelism\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Parallelism in deep learning; check \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"hpc\",\n    \"title\": \"hpc\"\n  }, \"[[hpc]]\"), \" for terminology\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Lots of stuff to unpack from \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://yren.netlify.app/posts/pytorch_distributed_data_parallel_with_model_parallel_in_an_hpc_environment/\"\n  }, \"this link\"))), mdx(\"h2\", null, \"Data parallelism\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Preprocessing with distributed computing; form a pipeline for data transformation and loading\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"PyTorch \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"DataParallel\"), \", and in particular, \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"DistributedDataParallel\"), \" for multiple nodes\")), mdx(\"h2\", null, \"Model parallelism\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"When a model is too big to fit on one GPU, we would need to split components onto different GPUs\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Basically, any \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"nn.Module\"), \" has \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \".to(device)\"), \" run, and each part of the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"forward()\"), \" call would need to send its outputs to the next device as well.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"PyTorch lightning should have good abstraction for this, so we don't have to explicitly pass data around\")))), mdx(\"h2\", null, \"Pipeline abstraction\"), mdx(\"p\", null, \"In PyTorch, the abstraction using \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"just\"), \" PyTorch looks like this:\"), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"/ml-reviews/5d89e9e82f56379eaaf3a15521d5a358/pytorch-distributed.svg\",\n    \"alt\": \"pytorch-distributed\"\n  })), mdx(\"p\", null, \"#needs-expanding on how PyTorch lightning high level stuff is encorporated into this.\"));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"","private":false},"outboundReferences":[{"contextLine":"- Parallelism in deep learning; check [[hpc]] for terminology","targetAnchor":null,"refWord":"hpc","target":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"hpc\"), mdx(\"h2\", null, \"Terminology\"), mdx(\"p\", null, \"Here's a quick diagram to show the hierarchy:\"), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"/ml-reviews/4282ff3ee6a84a050fbfc10b8c797cb3/hpc-terms.svg\",\n    \"alt\": \"hpc-terms\"\n  })));\n}\n;\nMDXContent.isMDXComponent = true;","parent":{"id":"07c2ffd2-28b4-563c-97a6-0fb429473363","fields":{"slug":"/notes/hpc","title":"hpc"}}}}],"inboundReferences":[]},"fields":{"slug":"/notes/dl-parallelism","title":"dl-parallelism"}}},"pageContext":{"id":"041bb2c7-ad81-564e-b1e3-bea95906f626","refWordMdxSlugDict":{"hpc":"notes/hpc"}}},
    "staticQueryHashes": ["2221750479","2380733210","2768355698","63159454","847517413"]}