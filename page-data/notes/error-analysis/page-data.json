{
    "componentChunkName": "component---node-modules-gatsby-theme-kb-src-templates-topic-js",
    "path": "/notes/error-analysis",
    "result": {"data":{"file":{"childMdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"error-analysis\"), mdx(\"p\", null, \"A checklist for what kind of things to look out for when diagnosing models, related to \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/training-notes\",\n    \"title\": \"training-notes\"\n  }, \"[[training-notes]]\"), \".\"));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"","private":false},"outboundReferences":[{"contextLine":"A checklist for what kind of things to look out for when diagnosing models, related to [[training-notes]].","targetAnchor":null,"refWord":"training-notes","target":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"training-notes\"), mdx(\"p\", null, \"Here is a checklist of milestones for developing and testing model architectures: if we don't do well in one step, probably a good idea to go back one.  This more or less pertains to the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"model\"), \" part of the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/ml-ops\",\n    \"title\": \"ml-ops\"\n  }, \"[[ml-ops]]\"), \" lifecycle.\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Synthetic data flows through the model (i.e. you receive an output without errors).\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"The output looks qualitatively correct; arrays in the expected shape, and there are no \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"NaN\"), \"s.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Real training data flows through the model (e.g. PyTorch Lightning does a batch of validation data).\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Successfully iterate through a single training epoch.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"The training loss goes down over several training epochs.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"The training metric does not behave unexpectedly; for example \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"NaN\"), \" or negative for minimization.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Model is able to overfit a (small) training set.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Does well on the full training set.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Does well on dev/test sets.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Does well on application metrics and/or project goals.\", mdx(\"sup\", {\n    parentName: \"li\",\n    \"id\": \"fnref-1\"\n  }, mdx(\"a\", {\n    parentName: \"sup\",\n    \"href\": \"#fn-1\",\n    \"className\": \"footnote-ref\"\n  }, \"1\")))), mdx(\"h2\", null, \"Error analysis\"), mdx(\"p\", null, \"One thing I haven't really done in the past, which might be helpful is to take smaller subsets of data and annotate tags of my own that might be helpful in diagnosing why a model performs poorly in any of checklist items.\"), mdx(\"div\", {\n    \"className\": \"footnotes\"\n  }, mdx(\"hr\", {\n    parentName: \"div\"\n  }), mdx(\"ol\", {\n    parentName: \"div\"\n  }, mdx(\"li\", {\n    parentName: \"ol\",\n    \"id\": \"fn-1\"\n  }, \"Probably depends on who you ask, but the project goals should probably be defined well before the beginning of this list \\uD83D\\uDE05\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#fnref-1\",\n    \"className\": \"footnote-backref\"\n  }, \"\\u21A9\")))));\n}\n;\nMDXContent.isMDXComponent = true;","parent":{"id":"8ccaffca-2424-51c1-b9e6-3ade811031ed","fields":{"slug":"/notes/training-notes","title":"training-notes"}}}}],"inboundReferences":[]},"fields":{"slug":"/notes/error-analysis","title":"error-analysis"}}},"pageContext":{"id":"b146723c-3e1e-5c91-a094-29b83ca7f456","refWordMdxSlugDict":{"training-notes":"notes/training-notes","ml-ops":"notes/ml-ops","ml-deployment":"notes/ml-deployment"}}},
    "staticQueryHashes": ["2221750479","2380733210","2768355698","63159454","847517413"]}