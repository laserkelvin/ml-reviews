{
    "componentChunkName": "component---node-modules-gatsby-theme-kb-src-templates-topic-js",
    "path": "/notes/ml-auditing",
    "result": {"data":{"file":{"childMdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"ml-auditing\"), mdx(\"p\", null, \"The auditing process is to formally evaluate the performance of a new pipeline beyond training/testing metrics. Basically ask \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"where can the model go wrong?\"), \" Examples include:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Data and model bias\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Frequency of specific types of errors (e.g. misclassified groups)\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Performance on rare events\")), mdx(\"p\", null, \"Part of the auditing process involves designing adequate metrics that probe these aspects of the model as part of the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/ml-ops\",\n    \"title\": \"ml-ops\"\n  }, \"[[ml-ops]]\"), \" lifecycle. Discussions with the customer/collaborator will also help identify possible reasons.\"));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"","private":false},"outboundReferences":[{"contextLine":"Part of the auditing process involves designing adequate metrics that probe these aspects of the model as part of the [[ml-ops]] lifecycle. Discussions with the customer/collaborator will also help identify possible reasons.","targetAnchor":null,"refWord":"ml-ops","target":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"ml-ops\"), mdx(\"p\", null, \"Development of machine learning pipelines, from data to model training\", mdx(\"sup\", {\n    parentName: \"p\",\n    \"id\": \"fnref-1\"\n  }, mdx(\"a\", {\n    parentName: \"sup\",\n    \"href\": \"#fn-1\",\n    \"className\": \"footnote-ref\"\n  }, \"1\")), \" to deployment.\"), mdx(\"p\", null, \"The main ideas include \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/scalability\",\n    \"title\": \"scalability\"\n  }, \"[[scalability]]\"), \" of models, both in terms of training and in terms of \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/ml-deployment\",\n    \"title\": \"ml-deployment\"\n  }, \"[[ml-deployment]]\"), \"/inference, and making sure everything works well and is maintainable throughout the lifecycle of a project.\"), mdx(\"p\", null, \"Key concept is to maximize coupling between stages of \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"scoping\"), \", \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"data\"), \", \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"modeling\"), \", and \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"deployment\"), \" so that you can go back to prior steps with minimal effort and iterate.\"), mdx(\"p\", null, \"Some articles on the topic:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://blogs.nvidia.com/blog/2020/09/03/what-is-mlops/\"\n  }, \"Nvidia blog\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://fall2019.fullstackdeeplearning.com/\"\n  }, \"An entire course on the topic\"))), mdx(\"p\", null, \"Part of the challenge in MLOps is to deliver performance beyond good training and testing metrics. A few reasons for when \\\"\", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"good isn't good enough\"), \" are like unfair algorithms (e.g. discrimination), uninterpretable models, and more primitively when the application data comes from a different distribution or domain. This part is considered in \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/ml-auditing\",\n    \"title\": \"ml-auditing\"\n  }, \"[[ml-auditing]]\"), \".\"), mdx(\"h2\", null, \"Scoping\"), mdx(\"p\", null, \"The first step of the MLOps lifecycle is to work out what the ways ML can improve something, how to measure performance, and what kind of resources are needed/available. In a way we're defining ML as a solution to a problem that may or may not be immediately obvious.\"), mdx(\"p\", null, \"Part of the scoping process is \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"diligence\"), \": an assessment on feasibility, cost, and value. The first can be determined by a literature search, or seeing if others have done something similar, and establish a baseline (may be human level performance). \"), mdx(\"p\", null, \"The scoping of value needs to reconcile ML metrics (e.g. loss, accuracy) with application metrics/value, for example revenue for businesses, societal benefits, or degree of  automation for data analysis. \"), mdx(\"p\", null, \"The scoping of cost involves defining milestones and resources needed/available. We want to define deliverables, how performance can be measured, a timeline for when this can be feasibly done, and finally the resources/people needed to achieve this.\"), mdx(\"div\", {\n    \"className\": \"footnotes\"\n  }, mdx(\"hr\", {\n    parentName: \"div\"\n  }), mdx(\"ol\", {\n    parentName: \"div\"\n  }, mdx(\"li\", {\n    parentName: \"ol\",\n    \"id\": \"fn-1\"\n  }, \"See \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/training-notes\",\n    \"title\": \"training-notes\"\n  }, \"[[training-notes]]\"), \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#fnref-1\",\n    \"className\": \"footnote-backref\"\n  }, \"\\u21A9\")))));\n}\n;\nMDXContent.isMDXComponent = true;","parent":{"id":"c0eb38f6-e709-57d0-9fd0-98ddf97c804d","fields":{"slug":"/notes/ml-ops","title":"ml-ops"}}}}],"inboundReferences":[{"contextLine":"Part of the challenge in MLOps is to deliver performance beyond good training and testing metrics. A few reasons for when \"*good isn't good enough* are like unfair algorithms (e.g. discrimination), uninterpretable models, and more primitively when the application data comes from a different distribution or domain. This part is considered in [[ml-auditing]].","referrer":{"parent":{"id":"c0eb38f6-e709-57d0-9fd0-98ddf97c804d","fields":{"slug":"/notes/ml-ops","title":"ml-ops"}}}}]},"fields":{"slug":"/notes/ml-auditing","title":"ml-auditing"}}},"pageContext":{"id":"de11b79c-fbbb-5df6-9e8e-86a1a19bffa8","refWordMdxSlugDict":{"ml-ops":"notes/ml-ops","ml-deployment":"notes/ml-deployment","ml-auditing":"notes/ml-auditing","training-notes":"notes/training-notes"}}},
    "staticQueryHashes": ["2221750479","2380733210","2768355698","63159454","847517413"]}